# Задание 4
# 1. Напишите цикл, который выводит на экран и удаляет с начала элементы списка, пока он не останется пустым.

print('--- 1 ---')

lst = []

print('Enter list (for closing list enter empty string):')
while True:
    n = input('enter element {}\n'.format(len(lst) + 1))
    if n == '':
        print('List consists of {} element(s) now.'.format(len(lst)))
        print(lst)
        break
    else:
        lst.append(n)

while lst:  # Пока список не пустой [].
    print('Removing "{}"'.format(lst[0]))  # Выводим первый элемент.
    lst.pop(0)  # Удаляем первый элемент.
    print(lst)

# 2. Как сделать это же задание со строкой: напишите цикл, который выводит на экран и «удаляет» первый символ строки,
# пока она не станет пустой?

print('--- 2 ---')

s = input('Enter string:\n')

for i in range(len(s)):  # Проходим все элементы строки.
    print('Removing "{}"'.format(s[i]))  # Поточный элемент строки.
    print(s[i + 1:])  # "Удаляем" часть строки до поточного элемента включительно.

# 3. Напишите цикл, который выводит на экран и удаляет элементы списка от самого маленького до самого большого,
# пока он не останется пустым.

print('--- 3 ---')

lst = []

print('Enter list (for closing list enter empty string):')
while True:
    n = input('enter element {}\n'.format(len(lst) + 1))
    if n == '':
        print('List consists of {} element(s) now.'.format(len(lst)))
        print(lst)
        break
    else:
        lst.append(n)

for i in range(len(lst)):  # Проходим список столько раз, сколько у него элементов.
    print('Removing "{}"'.format(min(lst)))  # Минимальный элемент поточного списка.
    lst.remove(min(lst))  # Удаляем минимальный элемент из поточного спика. Удалит первый попавшийся.
    print(lst)

# 4. Дана последовательность натуральных ненулевых чисел, завершающаяся числом 0. Определите, какое наибольшее число
# подряд идущих элементов этой последовательности равны друг другу.

print('--- 4 ---')

# Задание решено двумя методами. Первый универсальный с перебором любого списка по i-му элементу, ограничен только
# условием задачи "натуральных ненулевых чисел, завершающаяся числом 0". Второй метод проверяет на равенство сразу
# при поочередном вводе последовательности, так как всегда можем выполнить сравнение и знаем какой элемент последний.

print('--- 4 (method 1) ---')

# Создание списка для метода 1

# lst = [5, 3, 3, 5, 1, 1, 1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 0]  # Готовые тестовые данные.

lst = []

print('Enter List')
print('(enter (n-1) elements,\n',
      'only last n element can and will be 0,\n',
      'for closing list enter "end"):')
while True:
    n = input('enter element {}\n'.format(len(lst) + 1))  # Добавляем элемент в список.
    if n == 'end':  # Больше элементов в списке не будет.
        lst.append(0)  # Добавляем 0 в конец списка исходя из условия.
        print('List consists of {} element(s) now.'.format(len(lst)))
        print(lst)
        break  # Список создан.
    else:
        try:
            int(n)  # Проверяем, что значение элемента целое.
        except ValueError:
            print('Only integer type!')
        else:
            if int(n) <= 0:  # Проверяем, что значение элемента больше или равно 0.
                print('Can\'t be less or equal to 0!')
            else:
                lst.append(int(n))  # Добавляем в список.

print('List created for method 1:\n', lst, sep='')

# Метод 1.

c = 0  # Счетчик для равних между собой соседних элементов.
max_c = 0  # Максимальное количество равных между собой элементов стоящих подряд в списке.

for i in range(len(lst) - 2):  # Последний не с чем сравнивать, последний с предпоследним нет смысла, 0 только один.
    if lst[i] == lst[i + 1]:  # Сравниваем поточный и следющий элемент.
        if c == 0:  # Для прошлого i-го элемента равенства нет.
            c += 2  # Первые два равных между собой элемента.
            max_c = max(max_c, c)  # Сохраняем максимальное значение равных элементов.
        else:
            c += 1  # Если равных элементов 3 и больше.
            max_c = max(max_c, c)  # Сохраняем максимальное значение равных элементов.
    else:
        c = 0  # Последовательность равенства элементов обрывается.

print('Max equal elements:', max_c)

# Метод 2.
# Ошибки ввода пользователем негативных данных не отслеживаются.

print('--- 4 (method 2) ---')

c = 0  # Счетчик для равних между собой соседних элементов.
max_c = 0  # Максимальное количество равных между собой элементов стоящих подряд в списке.

previous_el = -1  # Изначальное значение предыдущего элемента - целое, но не натуральное и не 0.
current_el = int(input('Enter element:\n'))  # Получаем первый элемент последовательности.

while current_el != 0:  # Если поточный элемент не последний в списке.
    if previous_el == current_el:  # Сравниваем предыдущий с поточным.
        c += 1  # Инкремент счетчика, если элементы равны.
        max_c = max(max_c, c)  # Сохраняем максимальное значение равных элементов.
    else:
        previous_el = current_el  # Поточный элемент становится предыдущим.
        c = 1  # Учитываем начальный элемент в цепочке равенства.
    current_el = int(input('Enter next element:\n'))  # Получаем следующий элемент.

print('Max equal elements:', max_c)
